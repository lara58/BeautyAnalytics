import pandas as pd
from pytrends.request import TrendReq
import os
import time
import random
from datetime import datetime

# Configuration compl√®te des pays et mots-cl√©s (traduits)
COUNTRIES = {
    "FR": {
        "name": "France",
        "keywords": [
            "cr√®me hydratante", "fond de teint", "mascara waterproof",
            "s√©rum vitamine C", "rouge √† l√®vres mat", "soin anti-√¢ge",
            "d√©maquillant", "bb cr√®me", "palette fards √† paupi√®res", "vernis √† ongles"
        ]
    },
    "US": {
        "name": "United States",
        "keywords": [
            "moisturizing cream", "foundation", "waterproof mascara",
            "vitamin C serum", "matte lipstick", "anti-aging cream",
            "makeup remover", "bb cream", "eyeshadow palette", "nail polish"
        ]
    },
    "DE": {
        "name": "Germany",
        "keywords": [
            "Feuchtigkeitscreme", "Foundation", "wasserfester Mascara",
            "Vitamin C Serum", "matte Lippenstift", "Anti-Aging-Creme",
            "Abschminkmittel", "BB-Creme", "Lidschatten-Palette", "Nagellack"
        ]
    },
    "GB": {
        "name": "United Kingdom",
        "keywords": [
            "moisturizing cream", "foundation", "waterproof mascara",
            "vitamin C serum", "matte lipstick", "anti-aging cream",
            "makeup remover", "bb cream", "eyeshadow palette", "nail polish"
        ]
    },
    "ES": {
        "name": "Spain",
        "keywords": [
            "crema hidratante", "base de maquillaje", "rimel resistente al agua",
            "suero de vitamina C", "pintalabios mate", "crema antiedad",
            "desmaquillante", "bb cream", "paleta de sombras", "esmalte de u√±as"
        ]
    }
}

# P√©riode compl√®te (2021-2023)
START_DATE = "2021-01-01"
END_DATE = "2023-12-31"

def init_pytrends(max_retries=3):
    """Initialise PyTrends avec gestion des retries"""
    for attempt in range(max_retries):
        try:
            pytrends = TrendReq(
                hl='en-US',
                tz=360,
                timeout=(30, 60),
                retries=2,
                backoff_factor=1,
                requests_args={'verify': False}
            )
            return pytrends
        except Exception as e:
            print(f"‚ö†Ô∏è Tentative {attempt + 1}/{max_retries} √©chou√©e: {str(e)}")
            time.sleep(5)
    return None

def fetch_data(country_code, keyword):
    """R√©cup√®re les donn√©es pour un mot-cl√© et un pays"""
    pytrends = init_pytrends()
    if not pytrends:
        return None

    try:
        print(f"  üîç R√©cup√©ration des donn√©es pour '{keyword}'...")

        # Configuration de la requ√™te
        pytrends.build_payload(
            kw_list=[keyword],
            timeframe=f"{START_DATE} {END_DATE}",
            geo=country_code
        )

        # R√©cup√©ration des tendances temporelles
        data = pytrends.interest_over_time()
        if data.empty or keyword not in data.columns:
            print(f"  ‚ö†Ô∏è Aucune donn√©e trouv√©e pour '{keyword}'")
            return None

        # R√©cup√©ration des topics associ√©s (optionnel)
        try:
            related = pytrends.related_queries()
            if related and keyword in related:
                data[f"{keyword}_related"] = str(related[keyword])
        except Exception as e:
            print(f"  ‚ö†Ô∏è Impossible de r√©cup√©rer les requ√™tes associ√©es: {str(e)}")

        return data[[keyword]]  # Retourne uniquement la colonne du mot-cl√©

    except Exception as e:
        print(f"  ‚ùå Erreur pour '{keyword}': {str(e)}")
        return None

def save_data(country_code, keyword, data):
    """Sauvegarde les donn√©es dans un fichier CSV"""
    if data is None or data.empty:
        return False

    # Cr√©ation du dossier si n√©cessaire
    os.makedirs(f"data/raw/{country_code}", exist_ok=True)

    # Nom de fichier avec timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    safe_keyword = "".join(c if c.isalnum() else "_" for c in keyword)
    filename = f"data/raw/{country_code}/{timestamp}_{safe_keyword}.csv"

    try:
        data.to_csv(filename, index=True)
        print(f"  ‚úÖ Sauvegard√©: {filename}")
        return True
    except Exception as e:
        print(f"  ‚ùå √âchec de sauvegarde: {str(e)}")
        return False

def main():
    print("==================================================")
    print("üöÄ D√©but de la r√©cup√©ration des donn√©es Google Trends")
    print(f"üìÖ P√©riode: {START_DATE} ‚Üí {END_DATE}")
    print(f"üåç Pays: {', '.join(COUNTRIES.keys())}")
    print("==================================================\n")

    total_success = 0
    total_attempts = 0

    for country_code, config in COUNTRIES.items():
        print(f"üåç {config['name']} ({country_code})")
        print(f"   Mots-cl√©s: {len(config['keywords'])}")

        for keyword in config["keywords"]:
            total_attempts += 1
            print(f"\n   üìå '{keyword}'")

            # R√©cup√©ration des donn√©es
            data = fetch_data(country_code, keyword)

            # Sauvegarde si donn√©es valides
            if data is not None:
                if save_data(country_code, keyword, data):
                    total_success += 1

            # Pause al√©atoire pour √©viter les blocages
            time.sleep(random.uniform(2, 8))

        print(f"\n   ‚û°Ô∏è {config['name']} termin√© ({total_success}/{total_attempts} succ√®s)\n")

    print("==================================================")
    print(f"üéâ R√©cup√©ration termin√©e! {total_success}/{total_attempts} r√©ussis")
    print("üìÇ Dossier de sortie: data/raw/")
    print("==================================================")

if __name__ == "__main__":
    main()
